name: AMD Stock Data Update

on:
  # Ejecutar de lunes a viernes a las 4:30 PM EST (21:30 UTC)
  schedule:
    - cron: '30 21 * * 1-5'
  
  # Permitir ejecuci√≥n manual
  workflow_dispatch:

jobs:
  update-amd-data:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    # Paso 1: Obtener el c√≥digo del repositorio
    - name: Checkout
      uses: actions/checkout@v3
    
    # Paso 2: Configurar Python
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    # Paso 3: Extraer y guardar datos de AMD
    - name: Extract AMD Stock Data
      run: |
        echo "üöÄ Iniciando extracci√≥n de datos AMD..."
        
        # Instalar yfinance
        pip install yfinance
        
        # Script Python inline
        python << 'END_PYTHON'
import yfinance as yf
from datetime import datetime
import sys

print(f"üìÖ Fecha de ejecuci√≥n: {datetime.now()}")
print("=" * 50)

try:
    # Descargar datos de AMD (√∫ltimos 5 d√≠as)
    print("üìä Descargando datos de AMD...")
    ticker = yf.Ticker("AMD")
    data = ticker.history(period="5d")
    
    if data.empty:
        print("‚ùå No se obtuvieron datos del mercado")
        # Crear archivo con mensaje de error
        with open('amd_stock_data.csv', 'w') as f:
            f.write('Date,Status,Message\n')
            f.write(f'{datetime.now():%Y-%m-%d},ERROR,No market data available\n')
    else:
        # Guardar datos en CSV
        data.to_csv('amd_stock_data.csv')
        
        # Mostrar resumen
        last_price = data['Close'].iloc[-1]
        last_date = data.index[-1].strftime('%Y-%m-%d')
        rows = len(data)
        
        print(f"‚úÖ Archivo 'amd_stock_data.csv' creado exitosamente")
        print(f"üìà Registros guardados: {rows}")
        print(f"üí∞ √öltimo precio de cierre: ${last_price:.2f}")
        print(f"üìÖ √öltima fecha: {last_date}")
        
        # Informaci√≥n adicional
        info = ticker.info
        print(f"\nüìä Informaci√≥n adicional de AMD:")
        print(f"   Nombre: {info.get('longName', 'Advanced Micro Devices, Inc.')}")
        print(f"   Sector: {info.get('sector', 'Technology')}")
        print(f"   Market Cap: ${info.get('marketCap', 0):,.0f}")
        print(f"   P/E Ratio: {info.get('trailingPE', 'N/A')}")
        
        # C√°lculo de cambio diario
        if len(data) > 1:
            prev_close = data['Close'].iloc[-2]
            change = last_price - prev_close
            change_pct = (change / prev_close) * 100
            print(f"   Cambio diario: ${change:.2f} ({change_pct:+.2f}%)")
            
except Exception as e:
    print(f"‚ùå Error: {str(e)}")
    # Crear archivo CSV con informaci√≥n del error
    with open('amd_stock_data.csv', 'w') as f:
        f.write('Date,Status,Error\n')
        f.write(f'{datetime.now():%Y-%m-%d},ERROR,{str(e)}\n')
    print("‚ö†Ô∏è Archivo de error creado")

print("=" * 50)
print("‚úÖ Proceso completado")
END_PYTHON
    
    # Paso 4: Verificar que el archivo se cre√≥
    - name: Verify File Creation
      run: |
        echo "üîç Verificando archivos..."
        if [ -f "amd_stock_data.csv" ]; then
          echo "‚úÖ amd_stock_data.csv existe"
          echo "üìä Primeras l√≠neas del archivo:"
          head -10 amd_stock_data.csv
        else
          echo "‚ùå Error: amd_stock_data.csv no fue creado"
          exit 1
        fi
    
    # Paso 5: Commit y push de los cambios
    - name: Commit and Push
      run: |
        # Configurar Git
        git config --global user.name "GitHub Actions Bot"
        git config --global user.email "actions@github.com"
        
        # Agregar archivo
        git add amd_stock_data.csv
        
        # Verificar si hay cambios
        if git diff --staged --quiet; then
          echo "‚ÑπÔ∏è No hay cambios nuevos en los datos"
        else
          # Hacer commit con mensaje descriptivo
          COMMIT_MSG="üìä Update AMD stock data - $(date +'%Y-%m-%d %H:%M:%S UTC')"
          git commit -m "$COMMIT_MSG"
          
          # Push
          git push
          echo "‚úÖ Datos actualizados en el repositorio"
        fi
