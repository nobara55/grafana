name: Daily AMD Stock Data Extraction

on:
  schedule:
    - cron: '30 21 * * 1-5'
  workflow_dispatch:

jobs:
  extract-stock-data:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install yfinance pandas
    
    - name: Debug - List files before extraction
      run: |
        echo "üìÅ Archivos antes de la extracci√≥n:"
        ls -la
    
    - name: Run stock data extractor
      run: |
        # Intentar ejecutar el script si existe
        if [ -f "stock_data_extractor.py" ]; then
          echo "‚úÖ Ejecutando stock_data_extractor.py"
          python stock_data_extractor.py || echo "‚ö†Ô∏è Error al ejecutar el script"
        else
          echo "‚ùå stock_data_extractor.py no encontrado"
          echo "üìù Creando script inline..."
          
          # Crear y ejecutar script inline
          python << 'EOF'
import yfinance as yf
import pandas as pd
from datetime import datetime

print("üöÄ Iniciando extracci√≥n de datos AMD...")

try:
    # Descargar datos
    amd = yf.download("AMD", period="5d", progress=False)
    
    if not amd.empty:
        # Guardar en CSV
        amd.to_csv('amd_stock_data.csv')
        print(f"‚úÖ Datos guardados en amd_stock_data.csv")
        print(f"üìä √öltimo precio: ${amd['Close'].iloc[-1]:.2f}")
    else:
        print("‚ùå No se obtuvieron datos")
        # Crear archivo vac√≠o
        pd.DataFrame({"Date": [datetime.now()], "Error": ["No data"]}).to_csv('amd_stock_data.csv', index=False)
        
except Exception as e:
    print(f"‚ùå Error: {e}")
    # Crear archivo de error
    pd.DataFrame({"Date": [datetime.now()], "Error": [str(e)]}).to_csv('amd_stock_data.csv', index=False)
EOF
        fi
    
    - name: Debug - List files after extraction
      run: |
        echo "üìÅ Archivos despu√©s de la extracci√≥n:"
        ls -la
        echo ""
        echo "üìä Contenido de amd_stock_data.csv (si existe):"
        if [ -f "amd_stock_data.csv" ]; then
          head -10 amd_stock_data.csv
        else
          echo "‚ùå amd_stock_data.csv no existe"
        fi
    
    - name: Commit and push changes
      run: |
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "GitHub Actions Bot"
        
        # Verificar si el archivo existe antes de agregarlo
        if [ -f "amd_stock_data.csv" ]; then
          echo "‚úÖ Agregando amd_stock_data.csv"
          git add amd_stock_data.csv
          
          # Verificar si hay cambios
          if git diff --staged --quiet; then
            echo "‚ÑπÔ∏è No hay cambios en el archivo"
          else
            git commit -m "üìä Update AMD stock data - $(date +'%Y-%m-%d')"
            git push
            echo "‚úÖ Cambios subidos al repositorio"
          fi
        else
          echo "‚ùå amd_stock_data.csv no fue creado"
          echo "üîß Creando archivo de prueba..."
          echo "Date,Status" > amd_stock_data.csv
          echo "$(date +'%Y-%m-%d'),Test run" >> amd_stock_data.csv
          git add amd_stock_data.csv
          git commit -m "üîß Test run - $(date +'%Y-%m-%d')"
          git push
        fi
